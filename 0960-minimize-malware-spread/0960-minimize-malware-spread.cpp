///Disjoint set snippet code
class Disjointset {
   
public:
 //constructor
  vector<int> rank, parent, size;
    Disjointset(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }
///find ultimate parent function
    int findUpar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUpar(parent[node]);
    }

    void unionbyrank(int u, int v) {
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if (ulp_u == ulp_v) return;//both belong to same compo as both have same ultimateparent
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {//same rank
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionbysize(int u, int v) {
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if (ulp_u == ulp_v) return;//both belong to same compo as both have same ultimateparent
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        Disjointset ds(n);
///creating disjoint set and connecting nodes
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i!=j && graph[i][j]){
                    ds.unionbysize(i,j);
                }
            }
        }
        //hash array for counting numbers of infected nodes in a disjoint set
//oneinfnode vector stores corresponding infected node in that disjoint set and size of set
         vector<int>hash(n,0);
         vector<pair<int,int>>oneinfnode(n);
         for(auto i:initial){
           int par=ds.findUpar(i);
           hash[par]++;
           oneinfnode[par]={i,ds.size[par]};
         }

         
// # 1. /now just getting Disjoint set which has exactly one infected node and has maximum size and the infected node
int mini=1e8,size=-1;;
for(int i=0;i<n;i++){
    if(hash[i]==1){
    if(oneinfnode[i].second>size){
        mini=oneinfnode[i].first;
        size=oneinfnode[i].second;
    }
    else if(oneinfnode[i].second==size)
     mini=min(mini,oneinfnode[i].first);
    }
}

if(mini==1e8){
    return *min_element(initial.begin(),initial.end());
}
return mini;

    }
};